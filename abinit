#!/bin/bash
#
# abinit [ port ]
#   this script sets up the database with users, database, and seeds it with initial data
#   run this once, first, before running the sql container.
#   then, run this again, as a new container, mounting the container you created with init.
#
# when finished it can idle on a port with a web server that does nothing.
# this can be handy for orchestrating initial startup
#
set -e

. /usr/local/etc/abenv

# fix permissions and ownership of ${PG_HOME}
mkdir -p -m 0700 ${PG_HOME}
chown -R postgres:postgres ${PG_HOME}

# fix permissions and ownership of /run/postgresql
mkdir -p -m 0755 /run/postgresql /run/postgresql/${PG_VERSION}-main.pg_stat_tmp
chown -R postgres:postgres /run/postgresql
chmod g+s /run/postgresql

# disable ssl
sed 's/ssl = true/#ssl = true/' -i ${PG_CONFDIR}/postgresql.conf

# listen on all interfaces
cat >> ${PG_CONFDIR}/postgresql.conf <<EOF
listen_addresses = '*'
EOF

if [ "${PSQL_TRUST_LOCALNET}" == "true" ]; then
  echo "Enabling trust samenet in pg_hba.conf..."
  cat >> ${PG_CONFDIR}/pg_hba.conf <<EOF
host    all             all             samenet                 trust
EOF
fi

# allow remote connections to postgresql database
cat >> ${PG_CONFDIR}/pg_hba.conf <<EOF
host    all             all             0.0.0.0/0               md5
EOF

cd ${PG_HOME}

# initialize PostgreSQL data directory
if [ ! -d ${PG_DATADIR} ]; then
  # check if we need to perform data migration
  PG_OLD_VERSION=$(find ${PG_HOME}/[0-9].[0-9]/main -maxdepth 1 -name PG_VERSION 2>/dev/null | sort -r | head -n1 | cut -d'/' -f5)

  if [ ! -f "${PG_HOME}/pwfile" ]; then
    PG_PASSWORD=$(pwgen -c -n -1 14)
    echo "${PG_PASSWORD}" > ${PG_HOME}/pwfile
  fi

  echo "Initializing database..."
  sudo -u postgres -H "${PG_BINDIR}/initdb" \
    --pgdata="${PG_DATADIR}" --pwfile=${PG_HOME}/pwfile \
    --username=postgres --encoding=unicode --auth=trust >/dev/null
fi

if [ -f ${PG_HOME}/pwfile ]; then
  PG_PASSWORD=$(cat ${PG_HOME}/pwfile)
  echo "|------------------------------------------------------------------|"
  echo "| PostgreSQL User: postgres, Password: ${PG_PASSWORD}              |"
  echo "|                                                                  |"
  echo "| To remove the PostgreSQL login credentials from the logs, please |"
  echo "| make a note of password and then delete the file pwfile          |"
  echo "| from the data store.                                             |"
  echo "|------------------------------------------------------------------|"
fi

if [ -n "${DB_USER}" ]; then
  if [ -z "${DB_PASS}" ]; then
    echo ""
    echo "WARNING: "
    echo "  Please specify a password for \"${DB_USER}\". Skipping user creation..."
    echo ""
    DB_USER=
  else
    echo "Creating user \"${DB_USER}\"..."
    echo "CREATE ROLE ${DB_USER} with LOGIN CREATEDB SUPERUSER PASSWORD '${DB_PASS}';" |
      sudo -u postgres -H ${PG_BINDIR}/postgres --single \
        -D ${PG_DATADIR} -c config_file=${PG_CONFDIR}/postgresql.conf >/dev/null
  fi
fi

if [ -n "${DB_NAME}" ]; then
  for db in $(awk -F',' '{for (i = 1 ; i <= NF ; i++) print $i}' <<< "${DB_NAME}"); do
    echo "Creating database \"${db}\"..."
    echo "CREATE DATABASE ${db};" | \
      sudo -u postgres -H ${PG_BINDIR}/postgres --single \
        -D ${PG_DATADIR} -c config_file=${PG_CONFDIR}/postgresql.conf >/dev/null

    if [ "${DB_UNACCENT}" == "true" ]; then
      echo "Installing unaccent extension..."
      echo "CREATE EXTENSION IF NOT EXISTS unaccent;" | \
        sudo -u postgres -H ${PG_BINDIR}/postgres --single ${db} \
          -D ${PG_DATADIR} -c config_file=${PG_CONFDIR}/postgresql.conf >/dev/null
    fi

    if [ -n "${DB_USER}" ]; then
      echo "Granting access to database \"${db}\" for user \"${DB_USER}\"..."
      echo "GRANT ALL PRIVILEGES ON DATABASE ${db} to ${DB_USER};" |
        sudo -u postgres -H ${PG_BINDIR}/postgres --single \
          -D ${PG_DATADIR} -c config_file=${PG_CONFDIR}/postgresql.conf >/dev/null
    fi
  done
fi

echo "Done with initialization ... now seeding database with starting data"

echo "Starting PostgreSQL server..."
/etc/init.d/postgresql start

psql -Upostgres -h $(hostname -i) -f /usr/local/etc/PG.sql ${DB_NAME}

/etc/init.d/postgresql stop

echo "Done with initialization ... database "$DB_NAME" is ready to use"

echo "chaining abadm.py"

exec "abadm.py" $@
